import React from "react";

interface Props {
    nombre: string;
}

export const Saludo: React.FC<Props> = (props) => {
    const { nombre } = props;  // Destructuring para no tener que estar siempre repitiendo props.nombre. Se usan llaves porque es un objeto.
    return <h1> Hola {nombre}</h1>;
};

/*
Tambi√©n se podr√≠a hacer as√≠. Este es el m√©todo moderno. ReactFC ya no se usa seg√∫n Gemini Pro.

export const Saludo = ({nombre}: Props) => {   // Aqu√≠ hacemos el destructuring directamente en la firma donde recibimos los argumentos.
    return <h1>Hola {nombre}</h1>;
};

Esto es lo mismo otra vez pero menos abreviado:

export const Saludo = (props: Props) => {
    const { nombre} = props;
    return <h1>Hola {nombre}</h1>;
};


*/

/*

El Flujo de Ejecuci√≥n del Componente Saludo
Entrada: Invocaci√≥n con props

Un componente padre decide renderizar <Saludo /> y le pasa un "prop" llamado nombre con el valor "Ana".

React Crea el Objeto props üì¶

React ve los atributos en el JSX (nombre="Ana") y los empaqueta en un √∫nico objeto de JavaScript. Este objeto es props.

En este caso, el objeto props se ve as√≠: { nombre: "Ana" }.

React Llama a tu Funci√≥n ‚öôÔ∏è

React invoca la funci√≥n de tu componente, Saludo, pas√°ndole como √∫nico argumento el objeto props que acaba de crear.

La llamada es, efectivamente: Saludo({ nombre: "Ana" }).

Desestructuraci√≥n Dentro del Componente

La primera l√≠nea dentro de tu componente se ejecuta: const { nombre } = props;.

Como vimos, esto extrae la propiedad nombre del objeto props y la guarda en una nueva constante local llamada nombre.

Ahora, dentro de tu funci√≥n, tienes una constante nombre que contiene el valor "Ana".

Generaci√≥n del Elemento de Salida

Se ejecuta la l√≠nea del return: return <h1> Hola {nombre}</h1>;.

React eval√∫a el JSX. Donde encuentra las llaves {}, inserta el valor de la variable que hay dentro.

La expresi√≥n se convierte en: <h1> Hola Ana</h1>.

Este <h1> es un "Elemento de React", una descripci√≥n en JavaScript de lo que se debe pintar.

Salida: Renderizado en el DOM üñ•Ô∏è

React toma este Elemento de React y lo traduce a HTML real en el DOM (Document Object Model) del navegador.

El usuario final ve en su pantalla un encabezado <h1> con el texto "Hola Ana".

En resumen, el componente Saludo es una funci√≥n que recibe un objeto con datos, extrae la informaci√≥n que necesita y devuelve una descripci√≥n de la interfaz que React se encarga de pintar en la web.



*/